var shell = require('shelljs');
var _fs = require('fs');
var CleanCSS = require('clean-css');
var jQuery = require('jquery-deferred');


function builder() {};


/**
 * Adds WUI copyright at the front
 *
 * @param   {string}    src     The source code to come after the copyright
 * @return  {string}    src with copyright
 */
builder.prototype.addCopyright = function(src) {
    return  "/*! Wui 1.2.1" + 
        // Copyright should be the year the work was first published
        "\n * Copyright (c) 2015 Stephen Rolfe Nielsen (rolfe.nielsen@gmail.com)" +
        "\n *" +
        "\n * @license MIT" +
        "\n * http://www.wui-js.com/wui-1-2-1/license.html" +
        "\n */ \n\n" + 
        src;
};


/**
 * Writes a file based on passed in parameters
 *
 * @param   {object}    opts    Object of the following form
 * {
 *    src:    ['file1.js, file2.js, ...']           // An array of files to be concatenated
 *
 *    dest:   'destination.js'                      // Path to the output file
 *
 *    fn:     [function(){}, function(){}, ...]     // Array of function names to act on the
 *                                                  // concatenated contents of src, that return 
 *                                                  // the modified contents.
 * }
 */
builder.prototype.buildFile = function(opts) {
    var me = this,
        out = me.concat(opts.src),
        distPath = opts.dest,
        operations = opts.fn,   // Operations that will be performed on the concatenated files
        i = 0;
        
    for (i; i < operations.length; i++) {
        if (typeof me[operations[i]] == 'function') {
            out = me[operations[i]](out);
        }
    }

    _fs.writeFileSync(distPath, out);
    console.log(' '+ distPath +' built.');
};


/**
 * Concatenates files or strings together. If the filePath is longer than 200 characters it is
 * assumed to be a code snippet and gets included in the file. Non-existant paths are included
 * in the concatenation (just in case they're snippets).
 *
 * @param   {array}     fileList    An array of one or more files to concatenate
 * @return  {string}    A string    containing the concatenated contents of 'fileList' array
 */
builder.prototype.concat = function(fileList) {
    return fileList.map(function(filePath){
        if (filePath.length < 200) {
            if (shell.test('-f', filePath)) {
                return _fs.readFileSync(filePath).toString();
            }
            else {
                console.log("WARNING: '" + filePath + "' is not a file. " + 
                            "Path included in concatenation, but may cause errors");
                return filePath;
            }
        }
        // Probably not a path at all, but a src string
        else {
            return filePath;
        }
    }).join("\n\n");
};


/**
 * NOTE: DIFFERENT FROM WUI 1.2 CSSMINIFY IN PATH PARAMETER
 * Creates a non-minified CSS file with the images replaced with MD5 Hashes then creates a
 * minified version of that file in the same directory as the destination. To convert images to a
 * hash, the '?embed' parameter should be added to the files in the CSS
 *
 * @param   {string}    path            Space delimited list of source CSS files
 * @param   {string}    destination     Path to the destination css file
 * @param   {string}    root            The 'root' flag is so enhancecss can determine where to 
 *                                      get the images
 */
builder.prototype.cssMinify = function(path, destination, root) {
    var me = this;
    var retPromise = jQuery.Deferred();
    
    shell.exec('cat ' +path+ ' | enhancecss -o ' +destination+ ' --root ' +root, function(code, stdout, stderr) {
        if (code === 0) {
            // Add copyright to the newly created file
            me.buildFile({
                src : [destination],   
                dest : destination,
                fn: ['addCopyright']
            });
            
            // Minify new file
            me.buildFile({
                src : [(new CleanCSS().minify(me.concat([destination])).styles)],   
                dest : destination.replace('.css', '.min.css'),
                fn: []
            });
            
            retPromise.resolve();
        }
        else {
            console.log('ERROR BUILDING CSS: "' + path + '".');
            retPromise.reject();
        }
    });
    
    return retPromise;
}


/**
 * Wraps the file in the WUI namespace IIFE
 *
 * @param   {string}    src     The source code to be wrapped
 * @return  {string }   The wrapped code
 */
builder.prototype.namespaceWrap = function(src) {
    var header = "\n\n(function($,Wui) {\n\n\n",
        footer = "\n\n\n})(jQuery, window[_wuiVar]);\n\n";
        
    return header + src + footer;
};

module.exports = new builder();